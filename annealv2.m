function annealv2()  format("long")    # Set up the function  f = @(x, y) e.^x * (cos(x*y).^2)  alpha = 2;  x_k = zeros(1, 10);  x_k(1) = f(0, 0);  neighbor_x = 0;  neighbor_y = 0;  n = 1000;  lowestVal = 100000;  lowestX = 0;  lowestY = 0;  for k = 1:50    # Generate random points in a neighborhood around x and y    x_points = zeros(1, n);    y_points = zeros(1, n);    for i = 1:n      x_points(i) = ( (neighbor_x+1) - (-1*neighbor_x-1) )*rand() + (-1*neighbor_x-1);      y_points(i) = ( (neighbor_y+1) - (-1*neighbor_y-1) )*rand() + (-1*neighbor_y-1);      endfor        # Calculate values from x and y, also calculate probabilities here    fVals = zeros(1, n);    p = zeros(1, n);    for i = 1:n      fVals(i) = f(x_points(i), y_points(i));      p(i) = e.^(alpha * (x_k(k) - fVals(i)));      endfor        # Find the minimum point    minVal = 100000000;    minX = 0;    minY = 0;    for i = 1:n      if(f(x_points(i), y_points(i)) < minVal)        minVal = f(x_points(i), y_points(i));        minX = x_points(i);        minY = y_points(i);        endif      endfor    # Determine x_k+1    if(minVal < x_k(k))      x_k(k+1) = minVal;      neighbor_x = minX;      neighbor_y = minY;    else      # Use the probabilities to determine a new x_k+1 and a new neighborhood      S = sum(p);      # Normalize the probabilities      for i = 1:n        p(i) = p(i) / S;        endfor      # Pick a random number Eps in (0, 1), then find an the first i such that      # Eps <= p_1 + p_2 + ... + p_i      Eps = rand();      runningTotal = 0.0;      minI = 0;      for i = 1:n        runningTotal = runningTotal + p(i);        if(Eps <= runningTotal)          minI = i;          break;          endif        endfor      x_k(k+1) = fVals(minI);      neighbor_x = x_points(minI);      neighbor_y = y_points(minI);      endif      if(x_k(k+1) < lowestVal)        lowestVal = x_k(k+1);        lowestX = neighbor_x;        lowestY = neighbor_y;        endif    endfor    #disp(neighbor_x)    #disp(neighbor_y)    #disp(x_k)    #disp(x_k(11))    disp("x value:")    disp(lowestX)    disp("y value:")    disp(lowestY)    disp("f(x,y)")    disp(lowestVal)    #disp(lowestX)    #disp(lowestY)    #disp(lowestVal)endfunction