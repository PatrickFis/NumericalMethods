function solutionArray = GaussPivotExam(A, B)  # Forward elimination step  # Allocate the index array  indexArray = [1:length(A)];  # Declare and allocate variables  i = 0;  j = 0;  k = 0;  n = length(A);  r = 0.0;  rmax = 0.0;  smax = 0.0;  xmult = 0.0;  scale = zeros(1, length(A));  # Determine what the scale array should be  for i=1:n    indexArray(i) = i;    smax = 0.0;    for j=1:n      smax = max(smax, A(i,j));      endfor;    scale(i) = smax;    endfor;  # Determine what the index array should be and carry out forward elimination  for k=1:(n-1)    rmax = 0.0;    for i=k:n      r = abs(A(indexArray(i),k)/scale(indexArray(i)));      if(r > rmax)        rmax = r;        j = i;        endif;      endfor;    # Swap values at j and k    temp = indexArray(j);    indexArray(j) = indexArray(k);    indexArray(k) = temp;    for i=(k+1):n      xmult = A(indexArray(i), k)/A(indexArray(k), k);      A(indexArray(i), k) = xmult;      for j=(k+1):n        A(indexArray(i), j) = A(indexArray(i), j) - xmult*A(indexArray(k), j);        endfor;      endfor;    endfor;    #disp(A);    #disp(indexArray)  # End of forward elimination step    # Back substitution and solve step  sum = 0.0;  solutionArray = zeros(1, length(A));  for k=1:(n-1)    for i=(k+1):n      B(indexArray(i)) = B(indexArray(i)) - A(indexArray(i), k)*B(indexArray(k));    endfor;  endfor;  solutionArray(n) = B(indexArray(n))/A(indexArray(n), n);  #disp(solutionArray)  for i=(n-1):-1:1    sum = B(indexArray(i));    for j=(i+1):n      #disp(j)      sum = sum - A(indexArray(i), j)*solutionArray(j);      #disp(sum)    endfor;    solutionArray(i) = sum/A(indexArray(i), i);  endfor;  #printf("Solution to the linear system:\n");  #disp(solutionArray);  endfunction