function Exam1()  f = @(x) 2*x.^7 - 10*x.^5 - 2*x.^4 + x.^2 + 15*x + 5  # The bounds for this function will be [-10, 10], as these are easily verifiable  # to have opposite signs, and any x < -10 must be a negative number, and any   # x > 10 must be a positive number.    # VARIABLES  # epsilon is used to determine how accurate the function will be  # a is the left side of the interval currently being tested by the function  # b is the right side of the interval currently being tested by the function  # n is the counting variable used by the for loop  # c is the current guess of a zero for the function f  # fa is the function f evaluated at a  # fb is the function f evaluated at b  # fc is the function f evaluated at c  # error is used to determine how accurate the guess c is  # lastRoot is used to prevent the program from printing duplicate answers    # Prepare output format  format('long')  output_precision(11)  epsilon = 0.00000000001  a = 0  b = 0  n = 0  c = 0.0  fa = 0.0  fb = 0.0  fc = 0.0  error = 0.0  lastRoot = -11  # Iteratve over intervals [x, x+0.25]  for n=-10.0:0.25:10.0    # Calculate f(a) and f(b)    a = n;    b = n+1;    fa = f(a);    fb = f(b);    # Determine if the bisection method should be used on this interval    if(sign(fa) == sign(fb))      continue      endif    error = 1.0;    # Bisection method    for i=0:64      error = error/2;      c = a + error;      fc = f(c);      # Calculate answer to epsilon's precision.      if(abs(error) < epsilon)        if(lastRoot == c)          break          endif        # Print the result        printf("Root at ")        c        lastRoot = c;        break        endif      # Determine which side of the interval should be used in the next step      if(sign(fa) != sign(fc))        b = c;        fb = fc;      else        a = c;        fa = fc;        endif      endfor     endforendfunction